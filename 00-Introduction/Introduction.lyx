#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble



\usepackage{tikz}
\usetikzlibrary{positioning}
\usepackage{appendixnumberbeamer}

\usepackage{graphicx}
\usepackage{subfig}

\usetheme[progressbar=frametitle,block=fill,subsectionpage=progressbar]{metropolis}

% margin
\setbeamersize{text margin right=1.5cm}

% colors
\colorlet{DarkRed}{red!70!black}
\setbeamercolor{normal text}{fg=black}
\setbeamercolor{alerted text}{fg=DarkRed}
\setbeamercolor{progress bar}{fg=DarkRed}
\setbeamercolor{button}{bg=DarkRed}

% width of seperators
\makeatletter
\setlength{\metropolis@titleseparator@linewidth}{1pt}
\setlength{\metropolis@progressonsectionpage@linewidth}{1pt}
\setlength{\metropolis@progressinheadfoot@linewidth}{1pt}
\makeatother

% new alert block
\newlength\origleftmargini
\setlength\origleftmargini\leftmargini
\setbeamertemplate{itemize/enumerate body begin}{\setlength{\leftmargini}{4mm}}
\let\oldalertblock\alertblock
\let\oldendalertblock\endalertblock
\def\alertblock{\begingroup \setbeamertemplate{itemize/enumerate body begin}{\setlength{\leftmargini}{\origleftmargini}} \oldalertblock}
\def\endalertblock{\oldendalertblock \endgroup}
\setbeamertemplate{mini frame}{}
\setbeamertemplate{mini frame in current section}{}
\setbeamertemplate{mini frame in current subsection}{}
\setbeamercolor{section in head/foot}{fg=normal text.bg, bg=structure.fg}
\setbeamercolor{subsection in head/foot}{fg=normal text.bg, bg=structure.fg}

% footer
\makeatletter
\setbeamertemplate{footline}{%
    \begin{beamercolorbox}[colsep=1.5pt]{upper separation line head}
    \end{beamercolorbox}
    \begin{beamercolorbox}{section in head/foot}
      \vskip1pt\insertsectionnavigationhorizontal{\paperwidth}{}{\hskip0pt plus1filll \insertframenumber{} / \inserttotalframenumber \hskip2pt}\vskip3pt% 
    \end{beamercolorbox}%
    \begin{beamercolorbox}[colsep=1.5pt]{lower separation line head}
    \end{beamercolorbox}
}
\makeatother

% toc
\setbeamertemplate{section in toc}{\hspace*{1em}\inserttocsectionnumber.~\inserttocsection\par}
\setbeamertemplate{subsection in toc}{\hspace*{2em}\inserttocsectionnumber.\inserttocsubsectionnumber.~\inserttocsubsection\par}

% code
\usepackage{xcolor}
\usepackage{listings}

\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{background}{HTML}{F5F5F5}
\definecolor{keyword}{HTML}{4B69C6}
\definecolor{string}{HTML}{448C27}
\definecolor{comment}{HTML}{448C27}

\usepackage{inconsolata}
\lstdefinestyle{mystyle}{
    commentstyle=\color{comment},
    keywordstyle=\color{keyword},
    stringstyle=\color{string},
    basicstyle=\ttfamily,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,
    tabsize=4,
	showlines=true
}

\lstset{style=mystyle}
% Added by lyx2lyx
\setlength{\parskip}{\smallskipamount}
\setlength{\parindent}{0pt}
\end_preamble
\options t,10pt
\use_default_options false
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding utf8
\fontencoding auto
\font_roman "lmodern" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style danish
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title{Introduction
\backslash
vspace{-2mm}}
\end_layout

\begin_layout Plain Layout


\backslash
subtitle{Mini-Course:
 Heterogenous Agent Macro} 
\end_layout

\begin_layout Plain Layout


\backslash
author{Jeppe Druedahl}
\end_layout

\begin_layout Plain Layout


\backslash
date{2025}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout


\backslash
setbeamertemplate{footline}{} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[overlay,
 remember picture]
\end_layout

\begin_layout Plain Layout


\backslash
node[above left=0cm and 0.0cm of current page.south east] 
\end_layout

\begin_layout Plain Layout

{
\backslash
includegraphics[width=4cm]{figs/KUSAMFtitlelrcorner.pdf}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[overlay,
 remember picture]
\end_layout

\begin_layout Plain Layout


\backslash
node[below left=0.5cm and .8cm of current page.north east] 
\end_layout

\begin_layout Plain Layout

{
\backslash
includegraphics[width=1.5cm]{figs/KUSAMFlogo.pdf}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[overlay,
 remember picture]
\end_layout

\begin_layout Plain Layout


\backslash
node[below right=0.5cm and 0.8cm of current page.north west] 
\end_layout

\begin_layout Plain Layout

{
\backslash
includegraphics[width=1.5cm]{figs/CEBI.png}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[overlay,
 remember picture]
\end_layout

\begin_layout Plain Layout


\backslash
node[above right=0.5cm and 0.8cm of current page.south west] 
\end_layout

\begin_layout Plain Layout

{
\backslash
includegraphics[width=1.5cm]{figs/DNRF.png}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
addtocounter{framenumber}{-1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}<beamer>
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Plan}
\end_layout

\begin_layout Plain Layout


\backslash
tableofcontents[]
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Introduction
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-2mm}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Central economic topics:
\end_layout

\begin_deeper
\begin_layout Enumerate
Consumption-saving with risk and constraints (single-agent)
\end_layout

\begin_layout Enumerate
Heterogeneous agents in general equilibrium models
\end_layout

\begin_deeper
\begin_layout Enumerate
Long-run effects on aggregate outcomes 
\end_layout

\begin_layout Enumerate
Short-run effects on aggregate outcomes 
\end_layout

\begin_layout Enumerate
Drivers of inequality
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
History:
\end_layout

\begin_deeper
\begin_layout Enumerate
Heathcote et al.
 (2009),
 
\begin_inset Quotes ald
\end_inset

Quantitative Macroeconomics with Heterogeneous Households
\begin_inset Quotes ard
\end_inset


\end_layout

\begin_layout Enumerate
Kaplan and Violante (2018),
 
\begin_inset Quotes ald
\end_inset

Microeconomic Heterogeneity and Macroeconomic Shocks
\begin_inset Quotes ard
\end_inset


\end_layout

\begin_layout Enumerate
Cherrier et al.
 (2023),
 
\begin_inset Quotes ald
\end_inset

Household Heterogeneity in Macroeconomic Models:
 A Historical Perspective
\begin_inset Quotes ard
\end_inset


\end_layout

\begin_layout Enumerate
Auclert et.
 al.
 (2025),
 
\begin_inset Quotes ald
\end_inset

Fiscal and Monetary Policy with Heterogeneous Agents
\begin_inset Quotes ard
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Central technical method:

\series default
 
\emph on
Programming in Python
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Macroeconomic Models with Heterogeneous Agents
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-2mm}
\end_layout

\end_inset


\series bold
Model components:
\end_layout

\begin_deeper
\begin_layout Enumerate
Optimizing individual agents (households + firms)
\end_layout

\begin_layout Enumerate
Idiosyncratic and aggregate risk
\end_layout

\begin_layout Enumerate
Information flows (who knows what when 
\begin_inset Formula $\Rightarrow$
\end_inset

 often everything)
\end_layout

\begin_layout Enumerate
Market clearing (Walras vs.
 search-and-match)
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Insurance/markets:
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Complete
\emph default
 
\begin_inset Formula $\rightarrow$
\end_inset

 idiosyncratic risk insured away 
\begin_inset Formula $\sim$
\end_inset

 representative agent
\end_layout

\begin_layout Standard

\emph on
Incomplete
\emph default
 
\begin_inset Formula $\rightarrow$
\end_inset

 agents need to 
\emph on
self-insure
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Heterogeneity:
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Ex ante 
\emph default
in
\emph on
 
\emph default
preferences,
 abilities etc.
\end_layout

\begin_layout Standard

\emph on
Ex post
\emph default
 after realization of idiosyncratic shocks
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
HANC:
 
\series default
Heterogeneous Agent 
\emph on
Neo-Classical 
\emph default
model
\begin_inset Newline newline
\end_inset


\size footnotesize
(Aiyagari-Bewley-Hugget-Imrohoroglu or Standard Incomplete Markets model)
\end_layout

\begin_layout Itemize

\series bold
HANK:
 
\series default
Heterogeneous Agent 
\emph on
New Keynesian
\emph default
 model
\begin_inset Newline newline
\end_inset

(i.e.
 include price and wage setting frictions)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Lectures
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Topics:
\end_layout

\begin_deeper
\begin_layout Enumerate
Consumption-saving
\end_layout

\begin_layout Enumerate
Stationary equilibrium
\end_layout

\begin_layout Enumerate
Transitional dynamics
\end_layout

\begin_layout Enumerate
HANK models
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Teaching philosophy:
\end_layout

\begin_deeper
\begin_layout Enumerate
Go in depth - 
\emph on
from theory to implementation
\end_layout

\begin_layout Enumerate
Not a literature review - 
\emph on
key entrances to literature
\end_layout

\begin_layout Enumerate
Focus on tools - 
\emph on
easier to read economic insights
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Assumed knowledge:

\series default
 Similar to my undergraduate course 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Introduction to Programming and Numerical Analysis"
target "https://sites.google.com/view/numeconcph-introprog/home"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Content:
 Python + VSCode + git 
\end_layout

\begin_layout Standard
Preparation:
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Video playlist"
target "https://sites.google.com/view/numeconcph-het-agent-macro/python"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 (~10 hours at normal speed)
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Updated Python:

\series default
 Install (or re-install) newest Anaconda
\end_layout

\begin_layout Enumerate

\series bold
Packages:

\family typewriter
\series default
 
\size small
pip install quantecon,
 EconModel,
 consav
\end_layout

\begin_layout Enumerate

\series bold
GEMoodel tools:
\end_layout

\begin_deeper
\begin_layout Enumerate
Clone the 
\family typewriter
GEModelTools
\family default
 repository
\end_layout

\begin_layout Enumerate
Locate repository in command prompt 
\end_layout

\begin_layout Enumerate
Run 
\family typewriter
pip install -e .
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Other repositories used in the course:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "EconModelNotebooks"
target "https://github.com/NumEconCopenhagen/EconModelNotebooks"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "ConsumptionSavingNotebooks"
target "https://github.com/NumEconCopenhagen/ConsumptionSavingNotebooks"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "GEModelToolsNotebooks"
target "https://github.com/NumEconCopenhagen/GEModelToolsNotebooks"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "MiniCourse-HetAMacro"
target "MiniCourse-HetAMacro"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Programming in Python
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
References (pointers)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Variables are references to an instance of an object
\end_layout

\begin_layout Itemize
A 
\series bold
class
\series default
 defines the 
\series bold
type
\series default
 of an object
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{.attribute}
\end_layout

\end_inset

,
 state
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{.method()}
\end_layout

\end_inset

,
 action (incl.
 changing self)
\end_layout

\end_deeper
\begin_layout Itemize
Inheritance (of methods) (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{class Child(Parent)}
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Arithmetic operators (e.g.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{+,*,/,//,**,%}
\end_layout

\end_inset

) combine objects
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{=}
\end_layout

\end_inset

 
\series bold
assigns a reference
\series default
 (
\emph on
not a copy!
\emph default
)
\end_layout

\begin_layout Standard

\series bold
Question:

\series default
 What does 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{a}
\end_layout

\end_inset

 end up as?
 What if 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{a = [1,2,3]}
\end_layout

\end_inset

?
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,
\end_layout

\begin_layout Plain Layout

numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

a = np.array([1,2,3])
\end_layout

\begin_layout Plain Layout

b = a
\end_layout

\begin_layout Plain Layout

c = a[1:] # slicing
\end_layout

\begin_layout Plain Layout

b[0] = 3 # indexing
\end_layout

\begin_layout Plain Layout

c[0] = 3
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Types and in-place operations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Atomic types:

\series default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{int,
 float,
 str,
 bool,}
\end_layout

\end_inset

 etc.
\end_layout

\begin_layout Itemize

\series bold
Containers 
\series default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{list,
 tuple,
 dict,
 set,
 np.array,}
\end_layout

\end_inset

 etc.
\end_layout

\begin_layout Itemize

\series bold
Mutables
\series default
 (e.g.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{list,
 np.array}
\end_layout

\end_inset

)
\series bold
 
\series default
can change in-place
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
In-place operators
\series default
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{+=,
 -=}
\end_layout

\end_inset

 etc.)
\end_layout

\begin_layout Enumerate

\series bold
Slicing
\series default
:
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{x[:] = x + y}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Immutables
\series default
 (e.g.
 atomic types and tuples) can never change
\end_layout

\begin_layout Standard

\series bold
Questions:
 
\series default
What does 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{y}
\end_layout

\end_inset

 end up as?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,
\end_layout

\begin_layout Plain Layout

numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

x = np.array([1,2,3])
\end_layout

\begin_layout Plain Layout

y = x
\end_layout

\begin_layout Plain Layout

x += 1
\end_layout

\begin_layout Plain Layout

x[:] = x + 1
\end_layout

\begin_layout Plain Layout

x = x + 1
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Functions and scope
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Functions are objects
\series default
 (can e.g.
 be arguments in functions) 
\end_layout

\begin_deeper
\begin_layout Standard
Unlike in math:
\end_layout

\begin_layout Enumerate
Can change its arguments (side-effects)
\end_layout

\begin_layout Enumerate
Can call itself (recursion)
\end_layout

\end_deeper
\begin_layout Itemize
Decorators change function behavior (e.g.
 @numba.njit) 
\end_layout

\begin_layout Itemize
Variables can both be 
\series bold
local scope 
\series default
(good) or 
\series bold
global scope
\series default
 (bad) 
\end_layout

\begin_layout Standard

\series bold
Questions:
 
\series default
What is the output?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,
\end_layout

\begin_layout Plain Layout

numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

a = 1
\end_layout

\begin_layout Plain Layout

def f(x):
\end_layout

\begin_layout Plain Layout

	return x+a
\end_layout

\begin_layout Plain Layout

print(f(1))
\end_layout

\begin_layout Plain Layout

a = 2
\end_layout

\begin_layout Plain Layout

print(f(1))
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Computational tree and branches
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Comparison 
\series default
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{==,
 !=,
 <,
 <=,
 not,
 and,
 or}
\end_layout

\end_inset

 etc.) 
\end_layout

\begin_layout Itemize

\series bold
Conditionals 
\series default
(
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{if,
 elif,
 else}
\end_layout

\end_inset

) 
\end_layout

\begin_layout Itemize

\series bold
Loops
\series default
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{for,
 while,
 continue,
 break}
\end_layout

\end_inset

) 
\end_layout

\begin_layout Itemize

\series bold
Convergence
\series default
 (tolerance in optimizer or root-finder/equation-solver) 
\end_layout

\begin_layout Standard

\series bold
Questions:
 
\series default
How could this be implemented with a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{while}
\end_layout

\end_inset

 loop?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,
\end_layout

\begin_layout Plain Layout

numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

x = x0
\end_layout

\begin_layout Plain Layout

for i in range(n):
\end_layout

\begin_layout Plain Layout

    y = evaluate(x)
\end_layout

\begin_layout Plain Layout

    if check(y):
 break
\end_layout

\begin_layout Plain Layout

    x = update(x,y)
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

    raise ValueError('did not converge')
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Decimal numbers are not exact
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Never use exactness for decimal numbers 
\end_layout

\begin_deeper
\begin_layout Itemize
Order of computation matter 
\end_layout

\begin_layout Itemize
Best with numbers are around 1 (underflow and overflow) 
\end_layout

\end_deeper
\begin_layout Itemize
Division,
 exp,
 log etc.
 (costly) approximations 
\end_layout

\begin_layout Itemize

\series bold
Function approximation and interpolation often needed
\series default
 
\end_layout

\begin_layout Standard

\series bold
Questions:
 
\series default
Which are 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{True}
\end_layout

\end_inset

 and which are 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{False}
\end_layout

\end_inset

?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,
\end_layout

\begin_layout Plain Layout

numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

print(0.1 + 0.2 == 0.3)
\end_layout

\begin_layout Plain Layout

print(0.5 + 0.5 == 1.0)
\end_layout

\begin_layout Plain Layout

print(np.isclose(0.1+0.2,0.3))
\end_layout

\begin_layout Plain Layout

print(np.isclose(1e-200*1e200*1e200*1e-200,1.0))
\end_layout

\begin_layout Plain Layout

print(np.isinf(1e-200*(1e200*1e200)*1e-200))
\end_layout

\begin_layout Plain Layout

print(np.isclose(1e200*(1e-200*1e-200)*1e200,0.0))
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pseudo random numbers
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Only one seed 
\series default
(randomness not assured across seeds) 
\end_layout

\begin_layout Itemize
State of random number generator can be reset 
\end_layout

\begin_layout Itemize

\series bold
Monte Carlo
\series default
 simulation and integration
\end_layout

\begin_deeper
\begin_layout Enumerate
Static alternative:
 Use 
\series bold
quadrature rules 
\end_layout

\begin_layout Enumerate
Dynamic alternative:
 Discretize and derive 
\series bold
transition matrix
\end_layout

\end_deeper
\begin_layout Standard

\series bold
Questions:
 
\series default
What is 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{z}
\end_layout

\end_inset

 equal to?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,
\end_layout

\begin_layout Plain Layout

numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

rng = np.random.default_rng(123)
\end_layout

\begin_layout Plain Layout

s = rng.bit_generator.state
\end_layout

\begin_layout Plain Layout

x = rng.normal(size=5)
\end_layout

\begin_layout Plain Layout

y = rng.normal(size=5)
\end_layout

\begin_layout Plain Layout

rng.bit_generator.state = s
\end_layout

\begin_layout Plain Layout

z = rng.normal(size=5)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Documentation and debugging
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
No code is self-explanatory
\series default
 (for others,
 incl.
 future you) 
\end_layout

\begin_layout Itemize

\series bold
Write documentation
\series default
 (use 
\emph on
github-copilot
\emph default
) 
\end_layout

\begin_deeper
\begin_layout Enumerate
The comments explain humans what the code does.
 
\end_layout

\begin_layout Enumerate
The code makes the computer do what the comments say 
\end_layout

\end_deeper
\begin_layout Itemize
Important 
\series bold
design patterns
\series default
:
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Use namespaces (be aware of scope) and meaningful names 
\end_layout

\begin_layout Enumerate
No repetition of code-lines 
\begin_inset Formula $\Rightarrow$
\end_inset

 single-purpose functions/methods
\end_layout

\begin_layout Enumerate
Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{assert}
\end_layout

\end_inset

 (also print and plot intermediate results) 
\end_layout

\begin_layout Enumerate
Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{try-except}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Run from top to bottom
\series default
 (make 
\bar under

\begin_inset CommandInset href
LatexCommand href
name "shortcut"
target "https://sites.google.com/view/numeconcph-introprog/guides/vscode"
literal "false"

\end_inset


\bar default
)
\end_layout

\begin_deeper
\begin_layout Standard
Replication:
 
\bar under

\begin_inset CommandInset href
LatexCommand href
name "datacodestandard.org"
target "https://datacodestandard.org/"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Debugging
\series default
 (see 02.
 Debugging.ipynb)
\end_layout

\begin_deeper
\begin_layout Enumerate
Errors are (almost) always simple
\end_layout

\begin_layout Enumerate
Go through code step-by-step (
\emph on
manually
\emph default
 or 
\emph on
debugger
\emph default
) 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Other languages
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
High level languages:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
MATLAB
\series default
:
 Costly and not better.
 
\end_layout

\begin_layout Enumerate

\series bold
R
\series default
:
 Better at statistics and data work,
 but not pure numerical work.
\end_layout

\begin_layout Enumerate

\series bold
Julia
\series default
:
 Faster than Python (incl.
 numba),
 slower than C++.
 Smallish community.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Low level languages:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
C++:

\series default
 State-of-the-art for fastest code.
\end_layout

\begin_layout Enumerate

\series bold
Fortran
\series default
:
 No benefits relative to C++ (only legacy...).
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Hardware:
\end_layout

\begin_deeper
\begin_layout Enumerate
CPU:
 Fastest cores.
\end_layout

\begin_layout Enumerate
GPU:
 Many more cores,
 but specialized for e.g.
 linear algebra.
\end_layout

\begin_layout Enumerate
TPU (Google):
 Even more specialized at AI (machine learning)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
CPUs are complex
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Instruction set
\series default
 (assembly) is not just add,
 subtract,
 etc.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Work on vectors (SIMD) 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\emph on
homogeneity is good
\end_layout

\begin_layout Enumerate
Out-of-order execution 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\emph on
predictability is good
\emph default

\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
multiple branches can be calculated in advance
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Caching 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\emph on
latest read memory can be accessed quickly
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figs/computer.gif
	lyxscale 30
	width 50text%

\end_inset


\begin_inset Graphics
	filename figs/memory.gif
	lyxscale 30
	width 30text%

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Compilers can optimize a lot 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\bar under
use existing libraries
\end_layout

\begin_layout Itemize

\series bold
Parallelisation:
 
\series default
\emph on
Start up costs
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Hardware:

\series default
 Cores vs.
 CPUs vs.
 sockets vs,
 computers
\end_layout

\begin_layout Enumerate

\series bold
Software:

\series default
 Shared memory (e.g.
 OpenMP) or not (e.g.
 MPI)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Moore vs.
 Amdahl
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename figs/moores_law.png
	lyxscale 20
	width 50text%

\end_inset


\begin_inset Graphics
	filename figs/amdahls_law.png
	width 50text%

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-3mm}
\end_layout

\end_inset


\series bold
Moore's law:
 
\series default
Exponential growth in computational power
\end_layout

\begin_deeper
\begin_layout Enumerate
Originally:
 Faster cores (calculations per time unit)
\end_layout

\begin_layout Enumerate
Now:
 More cores per CPU
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Amdahl's law:

\series default
 Sequential code becomes the bottleneck
\end_layout

\begin_deeper
\begin_layout Enumerate
Time in tasks done in parallel 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Formula $0$
\end_inset


\end_layout

\begin_layout Enumerate
95% done in parallel 
\begin_inset Formula $\rightarrow$
\end_inset

 max 20x speed-up
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Need for speed (03.
 NeedForSpeed.ipynb)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Computation time vs programmer time
\series default
 
\begin_inset Newline newline
\end_inset

Use not-too-model-specific insights 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\emph on
better algorithm
\end_layout

\begin_layout Itemize

\series bold
Premature optimization is the root of all evil!
 
\series default

\begin_inset Newline newline
\end_inset

Use 
\emph on
line-profiler!
\end_layout

\begin_deeper
\begin_layout Enumerate
Use available code:
 Stand on the shoulder of giants 
\end_layout

\begin_layout Enumerate
In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{numpy}
\end_layout

\end_inset

:
 Use vectorization
\end_layout

\begin_layout Enumerate
Else:
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{numba}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Automatic differentiation?

\series default
 Use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{JAX}
\end_layout

\end_inset

 (or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinline{PyTorch}
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
Faster still?

\series default
 Implement bottleneck in C++ and call from Python
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
EconModelClass
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Package:

\series default
 EconModel 
\end_layout

\begin_layout Itemize

\series bold
Purpose:
\end_layout

\begin_deeper
\begin_layout Enumerate
Make it easy to write well-structed code.
\end_layout

\begin_layout Enumerate
Provide standard functionality for copying,
 saving and loading.
\end_layout

\begin_layout Enumerate
Provide an easy interface to call numba JIT compilled functions.
\end_layout

\begin_layout Enumerate
Provide an easy interface to call C++ functions.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Notebooks:
\begin_inset Newline newline
\end_inset


\series default
EconModelNotebooks
\backslash
01.
 Using the EconModelClass.ipynb 
\begin_inset Newline newline
\end_inset

(not the C++ part)
\end_layout

\begin_layout Itemize

\series bold
Video:
 
\series default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textcolor{DarkRed}{
\end_layout

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Youtube - EconModel"
target "https://www.youtube.com/watch?v=XaFSmhBpBGg&list=PLpFlKyGKUp8fo3FPxi0z1drVQJXlwcIqD&index=22&t=446s"
literal "false"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\end_body
\end_document
